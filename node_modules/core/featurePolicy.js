/**
 * @file node_modules/core/featurePolicy.js
 * @description 기능 on/off 정책 저장소 (방별/기본값)
 * 구조:
 * {
 *   defaults: { [featureName: string]: boolean },
 *   rooms: { [channelId: string]: { [featureName: string]: boolean } }
 * }
 */




/* =================================== 상수/전역 =================================== */


const _SCRIPT_NAME = "featurePolicy.js";
const { Logger } = require("shared/logger");
const { PATH_FEATURE_FLAGS } = require("shared/config");
let state = FileStream.readJson(PATH_FEATURE_FLAGS) || { defaults: {}, rooms: {} };




/* =================================== 유틸/헬퍼 =================================== */


/** @description 내부 저장 */
function _save() {
    try { FileStream.saveJson(PATH_FEATURE_FLAGS, state); }
    catch(e) { Logger.e(_SCRIPT_NAME, e); }
}




/* =================================== 메인 로직 =================================== */


/**
 * @description 기능 정의 보장, 없으면 기본값
 * @param {string} featureName
 * @param {boolean} defaultEnabled
 */
function ensureFeature(featureName, defaultEnabled = true) {
    if (!(featureName in state.defaults)) {
        state.defaults[featureName] = !!defaultEnabled;
        _save();
    }
}


/**
 * @description 방별 기능 사용 여부 조회
 * @param {string|bigint} roomId
 * @param {string} featureName
 */
function isEnabledForRoom(roomId, featureName) {
    const key = String(roomId);
    const roomOverrides = state.rooms[key];
    if (roomOverrides && featureName in roomOverrides) {
        return !!roomOverrides[featureName];
    }
    return !!state.defaults[featureName];
}


/**
 * @description 방별 기능 값 설정
 * @param {string|bigint} roomId
 * @param {string} featureName
 * @param {boolean} enabled
 */
function setRoom(roomId, featureName, enabled) {
    const key = String(roomId);
    if (!state.rooms[key]) state.rooms[key] = {};
    state.rooms[key][featureName] = !!enabled;
    _save();
}
/**
 * @description 기본값 설정(모든 방의 기본)
 * @param {string} featureName
 * @param {boolean} enabled
 */
function setDefault(featureName, enabled) {
    state.defaults[featureName] = !!enabled;
    _save();
}
/** @description 기능 오버라이드 제거 */
function resetRoomFeature(roomId, featureName) {
    const key = String(roomId);
    if (state.rooms[key]) {
        delete state.rooms[key][featureName];
        if (Object.keys(state.rooms[key]).length === 0) delete state.rooms[key];
        _save();
    }
}


/**
 * @description 전체/방별 목록 조회
 * @param {string|bigint} [roomId]
 */
function list(roomId) {
    if (roomId === undefined) {
        return {
            defaults: { ...state.defaults },
            rooms: { ...state.rooms },
        };
    }
    const key = String(roomId);
    const room = state.rooms[key] || {};
    const merged = {};
    const allFeatures = new Set([
        ...Object.keys(state.defaults),
        ...Object.keys(room),
    ]);
    for (const f of allFeatures) {
        merged[f] = f in room ? !!room[f] : !!state.defaults[f];
    }
    return {
        room: key,
        effective: merged,
        overrides: { ...room },
        defaults: { ...state.defaults }
    };
}
/** @description 등록된 기능 목록 */
function getKnownFeatures() {
    return Object.keys(state.defaults);
}


module.exports = {
    ensureFeature,
    isEnabledForRoom,
    setRoom, setDefault, resetRoomFeature,
    list, getKnownFeatures
};