/**
 * @file node_modules/shared/logger.js
 * @description 로그 남기기 일관화
 */



/* =================================== 상수/전역 =================================== */


const { PATH_LOG, DIVIDE_LINE } = require("shared/config");
const Logger = {};




/* =================================== 헬퍼/유틸 =================================== */


/** @description 파일로 로그 저장 */
function _saveLog(scriptName, content, level) {
    const path = `${PATH_LOG}/${scriptName}/${level}_${Date.now()}.txt`;
    FileStream.write(path, content);
}


/** @description 문자열 보장 */
function _stringify(input) {
    try {
        if (input instanceof Error) {
            const name = input.name || "Error";
            const msg = input.message || "";
            const stack = input.stack || "";
            return `${name}\n${msg}\n${stack}`;
        }
        if (typeof input === "object" && input !== null) {
            return JSON.stringify(
                input,
                (k, v) => (typeof v === "bigint" ? String(v) : v),
                2
            );
        }
        return String(input);
    } catch (e) {
        return String(input);
    }
}
/**
 * @description 공통 포맷 구성
 * @param {string} scriptName
 * @param {string} title
 * @param {string} body
 */
function _format(scriptName, title, body) {
    return `「${scriptName}」${title}\n\n${DIVIDE_LINE}\n\n${body}`;
}




/* =================================== 메인 로직 =================================== */


/** @description 일반 로그 */
Logger.i = (scriptName, log, isImportant = false) => {
    const content = _stringify(log);
    const formatted = _format(scriptName, "일반 로그", content);
    console.info(formatted);

    if (isImportant) _saveLog(scriptName, content, "info");
}
/** @description 디버깅 로그 */
Logger.d = (scriptName, log, isImportant = false) => {
    const content = _stringify(log);
    const formatted = _format(scriptName, "디버깅 로그", content);
    console.debug(formatted);

    if (isImportant) _saveLog(scriptName, content, "debug");
}
/** @description 경고 로그 */
Logger.w = (scriptName, log, isImportant = false) => {
    const content = _stringify(log);
    const formatted = _format(scriptName, "경고 로그", content);
    console.warn(formatted);

    if (isImportant) _saveLog(scriptName, content, "warn");
}
/** @description 에러 로그, 에러는 중요하므로 글로벌에도 남기기 */
Logger.e = (scriptName, log, isImportant = true) => {
    const content = _stringify(log);
    const formatted = _format(scriptName, "에러 발생", content);
    console.error(formatted);
    GlobalLog.e(formatted);

    if (isImportant) _saveLog(scriptName, content, "error");
}


/** @description 에러 로그 삭제 */
Logger.clear = () => {
    console.clear();
}


Logger.of = (scriptName) => {
    return {
        i: (log, important = false) => Logger.i(scriptName, log, important),
        d: (log, important = false) => Logger.d(scriptName, log, important),
        w: (log, important = false) => Logger.w(scriptName, log, important),
        e: (log, important = true)  => Logger.e(scriptName, log, important),
        clear: Logger.clear
    };
}


module.exports = { Logger };