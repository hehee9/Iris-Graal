/**
 * @file node_modules/features/moderation.js
 * @description 답장/멘션으로 밴/언밴 등록 및 게이트
 */




/* =================================== 상수/전역 =================================== */


const _SCRIPT_NAME = "moderation.js";
const { Logger } = require("shared/logger");
const { PATH_BAN_LIST } = require("shared/config");
const { isAdmin, parseCommand } = require("shared/utils");

/** @type {{[userId: string]: {reason?: string, at: number}}} */
let _cache = FileStream.readJson(PATH_BAN_LIST) || {};




/* =================================== 헬퍼/유틸 =================================== */


/** @description 밴 목록 저장 */
function _save() {
    try { FileStream.saveJson(PATH_BAN_LIST, _cache); }
    catch(e) { Logger.e(_SCRIPT_NAME, e); }
}


/**
 * @description 밴 유저 게이트 핸들러
 * @param {import("shared/types").Message} msg
 * @returns {boolean|void}
 */
function _onBanGate(msg) {
    if (!isAdmin(msg.author.userId) && isBanned(msg.author.userId)) return true;
}




/* =================================== 메인 로직 =================================== */


/** @description 밴 당한 유저인지 판별 */
function isBanned(userId) {
    return !!_cache[String(userId)];
}
/** @description 대상 유저 밴 */
function ban(userId, reason) {
    const key = String(userId);
    if (isAdmin(key)) return false; // 관리자 보호
    _cache[key] = { reason, at: Date.now() };
    _save();
    return true;
}
/** @description 대상 유저 밴 해제 */
function unban(userId) {
    const key = String(userId);
    delete _cache[key];
    _save();
}
/** @description 밴 토글 */
function toggleBan(userId, reason) {
    const key = String(userId);
    if (isAdmin(key)) return null; // 관리자 보호
    if (isBanned(key)) {
        unban(key);
        return false;
    }
    const ok = ban(key, reason);
    return ok ? true : null;
}
/** @description 전체 밴 목록 */
function listBans() {
    return { ..._cache };
}


/**
 * @description 관리자 명령 핸들러
 * @param {import("shared/types").Message} msg
 * @returns {boolean|void}
 */
function onMessage(msg) {
    try {
        const { cmd, args } = parseCommand(msg.content);
        if (!cmd || !isAdmin(msg.author.userId)) return;

        if (cmd === "밴") {
            const targetsSet = new Set();
            const mentions = Array.isArray(msg.mention) ? msg.mention : [];
            for (const m of mentions) {
                if (m?.srcUserId != null) targetsSet.add(String(m.srcUserId));
            }
            if (msg.reply?.srcUserId != null) {
                targetsSet.add(String(msg.reply.srcUserId));
            }

            const allTargets = Array.from(targetsSet);
            if (allTargets.length === 0) {
                msg.send("사용법: !밴 [멘션(복수 가능)] (사유) 또는 답장 후 !밴 (사유)");
                return true;
            }

            const reason = args.join(" "); // 멘션 토큰 제거까지는 요구 범위 밖이므로 단순 처리

            const skippedAdmins = [];
            const toggledOn = [];
            const toggledOff = [];

            for (const uid of allTargets) {
                if (isAdmin(uid)) { skippedAdmins.push(uid); continue; }
                const res = toggleBan(uid, reason);
                if (res === true) toggledOn.push(uid);
                else if (res === false) toggledOff.push(uid);
                else if (res === null) skippedAdmins.push(uid);
            }

            if (toggledOn.length === 0 && toggledOff.length === 0) {
                msg.send(skippedAdmins.length ? "대상 중 관리자는 밴할 수 없습니다." : "유효한 대상이 없습니다.");
                return true;
            }

            if (toggledOn.length > 0 && toggledOff.length === 0) {
                msg.send(toggledOn.length === 1 ? "차단되었습니다." : `차단 ${toggledOn.length}명 완료`);
            } else if (toggledOff.length > 0 && toggledOn.length === 0) {
                msg.send(toggledOff.length === 1 ? "차단 해제되었습니다." : `차단 해제 ${toggledOff.length}명 완료`);
            } else {
                msg.send(`차단 ${toggledOn.length}명, 해제 ${toggledOff.length}명 완료`);
            }
            if (skippedAdmins.length > 0) {
                msg.send("관리자는 밴 대상에서 제외되었습니다.");
            }
            return true;
        }

        if (cmd === "밴목록") {
            const bans = listBans();
            const lines = Object.keys(bans).map(u => `- ${u} (${bans[u].reason || ""}) @${bans[u].at}`);
            msg.send(lines.length ? `밴 목록\n${lines.join("\n")}` : "밴 목록이 비어 있습니다.");
            return true;
        }
    } catch (e) {
        Logger.e(_SCRIPT_NAME, e);
    }
}

function register({ registerMessage }) {
    // 게이트: 밴 유저의 메시지 차단
    registerMessage(_onBanGate, 1000);
    // 관리자 명령
    registerMessage(onMessage, 999);
}


module.exports = { register, isBanned, ban, unban };