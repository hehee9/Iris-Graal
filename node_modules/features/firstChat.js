/**
 * @file node_modules/features/firstChat.js
 * @description 처음으로 채팅을 받은 채팅방에 안내 메시지 출력
 * @todo 채팅방 정보 기록도 추가
 */




/* =================================== 전역 상수 =================================== */


const _SCRIPT_NAME = "firstChat.js";
// const { Logger } = require("shared/logger");
const { irisReply } = require("shared/utils");
const { addRoomInfo, getRoomInfo } = require("infra/roomRegistry");
const { PATH_FIRST_CHAT } = require("shared/config");


const HAS_SENT_MESSAGE_BEFORE = FileStream.readJson(PATH_FIRST_CHAT) || {};
const FIRST_MESSAGE = "[테스트용 방별 첫 인사 메시지]\n\nfeatures/firstChat.js";




/* =================================== 유틸/헬퍼 =================================== */


/** @description 채팅 보낸 적 있는 방 목록 업데이트 */
function _saveRoomList() {
    FileStream.saveJson(PATH_FIRST_CHAT, HAS_SENT_MESSAGE_BEFORE);
}


/** @description YYYY-MM-DD HH:MM */
function _timestamp() {
    return new Date(Date.now() + 32_400_000)
        .toISOString()
        .slice(0, 16)
        .replace("T", " ");
}




/* =================================== 메인 로직 =================================== */


/** @description 처음 채팅을 받은 방에 인사/가이드 메시지 출력 */
function welcome(room) {
    const key = String(room.channelId);

    // 방 정보 등록
    let roomInfo = getRoomInfo(key, room.name);
    if (roomInfo._needsUpdate) {
        const roomType = require("adapters/kakao/hydrator").getRoomType(key);
        roomInfo.isGroupChat = roomType.isGroupChat;
        roomInfo.isOpenChat = roomType.isOpenChat;
        delete roomInfo._needsUpdate;

        addRoomInfo(key, roomInfo);
    }

    // 첫 인사 출력
    
    if (HAS_SENT_MESSAGE_BEFORE[key]) return;

    HAS_SENT_MESSAGE_BEFORE[key] = _timestamp();
    _saveRoomList();

    irisReply(key, FIRST_MESSAGE);
}


/**
 * @description 메시지 핸들러
 * @param {import("shared/types").Message} msg
 * @returns {boolean|void} true를 반환하면 이후 핸들러가 중단됨
 */
function onMessage(msg) {
    welcome(msg.room);
    // 다른 로직도 계속 처리하므로 반환 X
}


/** @description 기능 등록 엔트리 */
function register({ registerMessage }) {
    registerMessage(onMessage);
}


module.exports = { register };