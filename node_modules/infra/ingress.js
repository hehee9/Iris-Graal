/**
 * @file node_modules/infra/ingress.js
 * @description HTTP 수신(raw) → 내부 이벤트 분배 브릿지
 */


/**
 * @typedef {object} IngressEvent
 * @property {"message"|"feed"} kind
 * @property {object} data
 */




/* =================================== 전역 상수 =================================== */


const _SCRIPT_NAME = "ingress.js";
const { Logger } = require("shared/logger");




/* =================================== 유틸/헬퍼 =================================== */


const NOP = () => {};

let _parser = (raw) => ({ kind: "message", data: raw }); // 기본: 메시지로 간주
let _handlers = {
    onMessage: NOP,
    onNewMember: NOP,
    onLeaveMember: NOP,
    onKickMember: NOP,
    onFeed: NOP,
};




/* =================================== 메인 로직 =================================== */


/**
 * @description 파서 주입
 * @param {(raw: object) => IngressEvent} parserFn
 */
function setParser(parserFn) {
    if (typeof parserFn === "function") _parser = parserFn;
}
/**
 * @description 핸들러 주입 (미제공 항목은 NOP)
 * @param {object} handlers
 * @param {(msg: object) => void} [handlers.onMessage]
 * @param {(feed: object) => void} [handlers.onNewMember]
 * @param {(feed: object) => void} [handlers.onLeaveMember]
 * @param {(feed: object) => void} [handlers.onKickMember]
 * @param {(feed: object) => void} [handlers.onFeed]
 */
function setHandlers(handlers) {
    _handlers = { ..._handlers, ...handlers };
}


/**
 * @description httpServer.onPost에 연결될 최종 엔트리
 * @param {object} raw HTTP 바디(raw)
 * @returns {object} raw 그대로 반환
 */
function handle(raw) {
    let ev;
    try {
        ev = _parser(raw); // { kind, data }
    } catch (e) {
        Logger.e(_SCRIPT_NAME, e);
        return raw;
    }

    try {
        App.runOnBackgroundThread(() => {
            try {
                if (ev?.kind === "feed") {
                    const ft = ev?.data?.feedType ? String(ev.data.feedType) : "";
                    if (ft === "4") _handlers.onNewMember(ev.data);
                    else if (ft === "2") _handlers.onLeaveMember(ev.data);
                    else if (ft === "6") _handlers.onKickMember(ev.data);
                    else _handlers.onFeed(ev.data);
                } else {
                    _handlers.onMessage(ev ? ev.data : raw);
                }
            } catch (e) {
                Logger.e(_SCRIPT_NAME, e);
            }
        });
    } catch (e) {
        Logger.e(_SCRIPT_NAME, e);
    }

    return raw; // 반환 계약 유지
}


module.exports = { setParser, setHandlers, handle };